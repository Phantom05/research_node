<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel="stylesheet" href="/stylesheets/style.css" />
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.15/lodash.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.0.min.js"></script>
    <link
      rel="stylesheet"
      href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap-theme.min.css"
    />
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js"></script>
  </head>

  <body>
    <div class="container">
      <h1><%= title %></h1>
      <p>Welcome to <%= title %></p>

      <% users.map(item=>{%>
      <div>
        <%= item.username %> <br />
        <%= item.email %><br />
        <%= item.password %><br />
        <%= item.userCode %><br />

        <hr />
      </div>
      <% }) %>

      <h2 class="hidden">get User</h2>
      <button id="getUser" class="btn btn-default hidden">Click</button>

      <form action="" id="insertForm">
        <h2>insert User <small>(Sign up)</small></h2>
        <div class="form-inline">
          <input
            type="email"
            name="email"
            class="form-control"
            placeholder="email"
          />
          <input
            type="password"
            name="password"
            class="form-control"
            placeholder="password "
          />
          <input
            type="text"
            name="username"
            class="form-control"
            placeholder="username "
          />
          <button type="submit" id="insertUser" class="btn btn-primary">
            Click
          </button>
        </div>
      </form>

      <form action="" id="deleteForm">
        <h2>delete User</h2>
        <div class="form-inline">
          <input
            type="text"
            id="userCode"
            name="userCode"
            class="form-control"
            placeholder="userCode"
          />
          <button type="submit" id="deleteUser" class="btn btn-default">
            Click
          </button>
        </div>
      </form>

      <form action="" id="updateForm">
        <h2>update User</h2>
        <div class="form-inline">
          <input
            type="text"
            class="form-control"
            placeholder="userCode"
            name="userCode"
          />
          <input
            type="text"
            class="form-control"
            placeholder="username"
            name="username"
          />
          <input
            type="text"
            class="form-control"
            placeholder="email"
            name="email"
          />
          <input
            type="text"
            class="form-control"
            placeholder="password"
            name="password"
          />
          <button type="submit" id="updateUser" class="btn btn-primary">
            Click
          </button>
        </div>
      </form>
    </div>

    <script>
      const getUser = document.getElementById("getUser");
      const insertUser = document.getElementById("insertUser");
      const insertForm = document.getElementById("insertForm");
      const deleteUser = document.getElementById("deleteUser");
      const deleteForm = document.getElementById("deleteForm");
      const updateUser = document.getElementById("updateUser");
      const updateForm = document.getElementById("updateForm");

      // NOTE: insert
      insertForm.addEventListener("submit", async function (e) {
        e.preventDefault();
        const exeptNode = ["BUTTON"];
        const elements = [...this.elements];

        const filterElements = elements.filter(
          (item) => exeptNode.indexOf(item.nodeName) === -1
        );
        const submitConfig = filterElements.map((item) => ({
          name: item.name,
          value: item.value,
        }));
        const hasAllValues = submitConfig.every(
          (item) => item.value.trim().length !== 0
        );
        if (hasAllValues) {
          console.log(submitConfig, "submitConfig");

          const submitFormat = _.reduce(
            submitConfig,
            (acc, i) => ((acc[i.name] = i.value), acc),
            {}
          );
          axios.post("/insert", submitFormat).then(({ data }) => {
            if (data.result === 1) {
              location.reload();
            } else {
              alert("중복입니다.");
            }
            console.log(data, "res");
          });
        } else {
          alert("모두 입력해주세요.");
        }
      });

      // NOTE: delete
      deleteForm.addEventListener("submit", function (e) {
        e.preventDefault();
        console.log("delete");
        const exeptNode = ["BUTTON"];
        const elements = [...this.elements];

        const filterElements = elements.filter(
          (item) => exeptNode.indexOf(item.nodeName) === -1
        );
        const submitConfig = filterElements.map((item) => ({
          name: item.name,
          value: item.value,
        }));
        const hasAllValues = submitConfig.every(
          (item) => item.value.trim().length !== 0
        );
        if (hasAllValues) {
          const submitFormat = _.reduce(
            submitConfig,
            (acc, i) => ((acc[i.name] = i.value), acc),
            {}
          );
          axios.post("/delete", submitFormat).then(({ data }) => {
            console.log(data, "res");
            if (data.result === 1) {
              location.reload();
            } else {
              console.log("삭제 실패");
            }
          });
        }
      });

      // NOTE: update
      updateForm.addEventListener("submit", function (e) {
        e.preventDefault();
        console.log("updateUser click");

        e.preventDefault();
        const exeptNode = ["BUTTON"];
        const elements = [...this.elements];

        const filterElements = elements.filter(
          (item) => exeptNode.indexOf(item.nodeName) === -1
        );
        const submitConfig = filterElements.map((item) => ({
          name: item.name,
          value: item.value,
        }));

        const submitFormat = _.reduce(
          submitConfig,
          (acc, i) => ((acc[i.name] = i.value), acc),
          {}
        );
        if (submitFormat.userCode.trim().length === 0) {
          console.log("userCode를 입력해주세요.");
        } else {
          console.log(submitFormat);
          axios.post("/update", submitFormat).then(({ data }) => {
            if (data.result === 1) {
              location.reload();
            } else {
              alert("업데이트 실패.");
            }
            console.log(data, "res");
          });
        }
      });

      // NOTE: get
      getUser.addEventListener("click", function () {
        console.log("getUser click");
        axios.get("/getUser").then(({ data }) => {
          console.log(data, "res");
        });
      });
    </script>
  </body>
</html>
